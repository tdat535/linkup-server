const Follow = require("../models/follow");
const User = require("../models/user");

const createFollow = async (followData) => {
  const { followerId, followingId } = followData;

  try {
    if (followerId === followingId) {
      return { error: "Kh√¥ng th·ªÉ t·ª± follow ch√≠nh m√¨nh.", status: 400 };
    }

    const follower = await User.findByPk(followerId);
    const following = await User.findByPk(followingId);
    if (!follower || !following) {
      return {
        isSuccess: false,
        status: 404,
        error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.",
      };
    }

    const existingFollow = await Follow.findOne({
      where: { followerId, followingId },
    });

    // üëá N·∫øu ƒë√£ t·ª´ng follow nh∆∞ng ƒë√£ unfollow, cho ph√©p follow l·∫°i
    if (existingFollow) {
      if (existingFollow.status === 'unfollowed') {
        existingFollow.status = 'accepted';
        existingFollow.followedAt = new Date(); // c·∫≠p nh·∫≠t th·ªùi gian m·ªõi
        await existingFollow.save();

        return {
          isSuccess: true,
          status: 200,
          message: "ƒê√£ follow l·∫°i th√†nh c√¥ng",
          followId: existingFollow.id,
        };
      }

      // N·∫øu v·∫´n ƒëang follow, b√°o l·ªói
      return {
        isSuccess: false,
        status: 400,
        error: "B·∫°n ƒë√£ follow ng∆∞·ªùi n√†y.",
      };
    }

    // ‚úÖ Ch∆∞a t·ª´ng follow, t·∫°o m·ªõi
    const newFollow = await Follow.create({
      followerId,
      followingId,
      status: 'accepted',
    });

    return {
      isSuccess: true,
      status: 200,
      message: "Theo d√µi th√†nh c√¥ng",
      followId: newFollow.id,
    };
  } catch (error) {
    throw new Error("L·ªói khi t·∫°o follow: " + error.message);
  }
};

const getFollow = async (userId) => {
  try {
    const user = await User.findByPk(userId);
    if (!user)
      return {
        isSuccess: true,
        status: 404,
        error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.",
      };

    // L·∫•y danh s√°ch ng∆∞·ªùi m√† user ƒëang follow
    const followingList = await Follow.findAll({
      where: { followerId: userId },
      include: [
        {
          model: User,
          as: "FollowingUser",
          attributes: ["id", "username", "avatar"],
        },
      ],
    });

    // L·∫•y danh s√°ch ng∆∞·ªùi ƒëang follow user
    const followersList = await Follow.findAll({
      where: { followingId: userId },
      include: [
        {
          model: User,
          as: "Follower",
          attributes: ["id", "username", "avatar"],
        },
      ],
    });

    return {
      isSuccess: true,
      status: 200,
      message: "L·∫•y danh s√°ch theo d√µi th√†nh c√¥ng",
      userId,
      following: followingList.map((f) => f.FollowingUser),
      followers: followersList.map((f) => f.Follower),
    };
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch follow:", error);
    throw new Error("L·ªói khi l·∫•y danh s√°ch follow: " + error.message);
  }
};

const unfollow = async (followerId, followingId) => {
  try {
    const followRecord = await Follow.findOne({
      where: { followerId, followingId },
    });

    if (!followRecord) {
      return {
        isSuccess: false,
        status: 404,
        error: "Kh√¥ng t√¨m th·∫•y m·ªëi quan h·ªá follow.",
      };
    }

    // C·∫≠p nh·∫≠t status th√†nh 'unfollowed'
    followRecord.status = 'unfollowed';
    await followRecord.save();

    return {
      isSuccess: true,
      status: 200,
      message: "ƒê√£ h·ªßy theo d√µi (unfollowed) th√†nh c√¥ng.",
    };
  } catch (error) {
    console.error("L·ªói khi unfollow:", error);
    return {
      isSuccess: false,
      status: 500,
      error: "L·ªói khi h·ªßy theo d√µi.",
    };
  }
};

module.exports = { createFollow, getFollow, unfollow };
