const MediaPost = require("../models/mediaPost"); // Assuming you have a User model
const Follow = require("../models/follow");
const User = require("../models/user");
const cloudinary = require("cloudinary").v2;
const { fn, col, literal } = require("sequelize");
const Like = require("../models/like");
const Comment = require("../models/comment");

// C·∫•u h√¨nh Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME, // L·∫•y t·ª´ Cloudinary Console
  api_key: process.env.CLOUDINARY_API_KEY, // L·∫•y t·ª´ Cloudinary Console
  api_secret: process.env.CLOUDINARY_API_SECRET, // L·∫•y t·ª´ Cloudinary Console
});

const createMediaPost = async (mediaData) => {
  try {
    if (!mediaData.content || mediaData.content.trim() === "") {
      return {
        isSuccess: false,
        status: 400,
        error: "Thi·∫øu n·ªôi dung b√†i vi·∫øt.",
      };
    }

    let mediaUrl = null;
    const isVideo = mediaData.type === "video"; // X√°c ƒë·ªãnh lo·∫°i media

    if (mediaData.file && mediaData.file.buffer) {
      const uploadResponse = await new Promise((resolve, reject) => {
        const uploadStream = cloudinary.uploader.upload_stream(
          {
            folder: isVideo ? "media_videos" : "media_posts",
            resource_type: isVideo ? "video" : "image",
          },
          (error, result) => {
            if (error) {
              reject("L·ªói t·∫£i l√™n Cloudinary");
            } else {
              resolve(result);
            }
          }
        );

        const bufferStream = new require("stream").PassThrough();
        bufferStream.end(mediaData.file.buffer);
        bufferStream.pipe(uploadStream);
      });

      mediaUrl = uploadResponse.secure_url;
      console.log("T·ªáp tin ƒë√£ t·∫£i l√™n Cloudinary:", mediaUrl);
    }

    // üìå ƒê·∫£m b·∫£o `type` lu√¥n c√≥ gi√° tr·ªã
    const newMediaContent = new MediaPost({
      content: mediaData.content,
      url: mediaUrl,
      userId: mediaData.userId,
      type: isVideo ? "video" : "post", // G√°n lo·∫°i n·ªôi dung
    });

    await newMediaContent.save();

    return {
      isSuccess: true,
      status: 200,
      message: `T·∫°o ${isVideo ? "video" : "b√†i vi·∫øt"} th√†nh c√¥ng`,
      id: newMediaContent.id,
      content: newMediaContent.content,
      mediaUrl,
      userId: newMediaContent.userId,
      type: newMediaContent.type,
    };
  } catch (error) {
    console.error("L·ªói khi t·∫°o n·ªôi dung:", error);
    throw new Error("L·ªói t·∫°o n·ªôi dung: " + error.message);
  }
};


const getMediaPosts = async (userId) => {
  try {
    // T√¨m danh s√°ch nh·ªØng ng∆∞·ªùi m√† user ƒëang theo d√µi v√† tr·∫°ng th√°i l√† "accepted"
    const followingList = await Follow.findAll({
      where: {
        followerId: userId,
        status: "accepted", // Ch·ªâ l·∫•y c√°c follow v·ªõi tr·∫°ng th√°i 'accepted'
      },
      attributes: ["followingId"], // Ch·ªâ l·∫•y ID ng∆∞·ªùi ƒë∆∞·ª£c theo d√µi
    });

    // L·∫•y danh s√°ch ID c·ªßa nh·ªØng ng∆∞·ªùi m√† user ƒëang theo d√µi
    let followedIds = followingList.map((follow) => follow.followingId);

    // Th√™m ch√≠nh userId ƒë·ªÉ l·∫•y c·∫£ b√†i vi·∫øt c·ªßa ng∆∞·ªùi ƒë√≥
    followedIds.push(userId);

    // L·∫•y b√†i vi·∫øt c√≥ status l√† 'active' c·ªßa nh·ªØng ng∆∞·ªùi trong danh s√°ch theo d√µi (bao g·ªìm ch√≠nh m√¨nh)
    const mediaPosts = await MediaPost.findAll({
      where: {
        userId: followedIds,
        status: "active",
      },
      attributes: [
        "id",
        "content",
        "url",
        "type",
        "createdAt",
        "updatedAt",
        [literal("(SELECT COUNT(*) FROM Likes WHERE Likes.postId = MediaPost.id)"), "likeCount"],
        [literal("(SELECT COUNT(*) FROM Comments WHERE Comments.postId = MediaPost.id)"), "commentCount"],
      ],
      include: [
        {
          model: User,
          attributes: ["id", "username", "avatar"],
        },
      ],
      order: [["createdAt", "DESC"]],
    });


    return {
      isSuccess: true,
      status: 200,
      message: "L·∫•y danh s√°ch b√†i vi·∫øt th√†nh c√¥ng",
      data: mediaPosts,
    };
  } catch (error) {
    throw new Error("Error getting media posts: " + error.message);
  }
};

const getTrendingPosts = async () => {
  try {
    const trendingPosts = await MediaPost.findAll({
      attributes: [
        "id",
        "content",
        "url",
        "type",
        "createdAt",
        "updatedAt",
        [literal("(SELECT COUNT(*) FROM Likes WHERE Likes.postId = MediaPost.id)"), "likeCount"],
        [literal("(SELECT COUNT(*) FROM Comments WHERE Comments.postId = MediaPost.id)"), "commentCount"],
        [literal("((SELECT COUNT(*) FROM Likes WHERE Likes.postId = MediaPost.id) + (SELECT COUNT(*) FROM Comments WHERE Comments.postId = MediaPost.id))"), "interactionScore"],
      ],
      include: [
        {
          model: User,
          attributes: ["id", "username", "avatar"], // L·∫•y th√¥ng tin ng∆∞·ªùi ƒëƒÉng b√†i
        }
      ],
      order: [[literal("interactionScore"), "DESC"]],
      limit: 10, // Gi·ªõi h·∫°n s·ªë b√†i vi·∫øt
    });

    return {
      isSuccess: true,
      status: 200,
      message: "L·∫•y b√†i vi·∫øt xu h∆∞·ªõng th√†nh c√¥ng",
      data: trendingPosts,
    };
  } catch (error) {
    console.error("Error getting trending posts:", error);
    throw new Error("Error getting trending posts: " + error.message);
  }
};


module.exports = { getMediaPosts, createMediaPost, getTrendingPosts };
