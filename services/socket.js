// socket.js
const { Server } = require('socket.io');
const Messenger = require('../models/messenger');
const User = require('../models/user'); // Import User model ƒë·ªÉ s·ª≠ d·ª•ng khi l·∫•y th√¥ng tin ng∆∞·ªùi g·ª≠i, ng∆∞·ªùi nh·∫≠n

const onlineUsers = new Map(); // L∆∞u user ƒëang online

const initSocket = (server) => {
    const io = new Server(server, {
        cors: {
            origin: "*", // Ho·∫∑c thay b·∫±ng domain c·ª• th·ªÉ
            methods: ["GET", "POST"]
        }
    });

    io.on('connection', (socket) => {
        console.log(`üîå Client ƒë√£ k·∫øt n·ªëi: ${socket.id}`);

        socket.on("testMessage", (data) => {
            console.log("üì© Nh·∫≠n tin nh·∫Øn test t·ª´ client:", data);
        });

        // L·∫Øng nghe user ƒëƒÉng nh·∫≠p v√† l∆∞u v√†o danh s√°ch online
        socket.on('userOnline', (userId) => {
            onlineUsers.set(userId, socket.id);
            console.log(`User ${userId} online`);
        });

        // X·ª≠ l√Ω g·ª≠i tin nh·∫Øn
        socket.on('sendMessage', async (message) => {
            const { senderId, receiverId, content, image } = message;

            try {
                // L∆∞u tin nh·∫Øn v√†o database
                const newMessage = await Messenger.create({ senderId, receiverId, content, image });

                // L·∫•y l·∫°i tin nh·∫Øn v·ª´a t·∫°o v·ªõi th√¥ng tin ng∆∞·ªùi g·ª≠i v√† ng∆∞·ªùi nh·∫≠n
                const fullMessage = await Messenger.findOne({
                    where: { id: newMessage.id },
                    include: [
                        { model: User, as: 'sender', attributes: ['id', 'username', 'avatar'] },
                        { model: User, as: 'receiver', attributes: ['id', 'username', 'avatar'] }
                    ]
                });

                // G·ª≠i tin nh·∫Øn ngay ƒë·∫øn ng∆∞·ªùi nh·∫≠n n·∫øu h·ªç ƒëang online
                const receiverSocketId = onlineUsers.get(receiverId);
                if (receiverSocketId) {
                    io.to(receiverSocketId).emit('receiveMessage', fullMessage);
                } else {
                    console.log(`‚ùå Ng∆∞·ªùi nh·∫≠n ${receiverId} kh√¥ng online.`);
                }
            } catch (error) {
                console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:", error);
            }
        });

        // X·ª≠ l√Ω khi user disconnect
        socket.on('disconnect', () => {
            console.log('User disconnected:', socket.id);
            for (let [userId, socketId] of onlineUsers) {
                if (socketId === socket.id) {
                    onlineUsers.delete(userId);
                    console.log(`‚ùå ƒê√£ x√≥a user ${userId} kh·ªèi danh s√°ch online.`);
                    break;
                }
            }
        });
    });

    return io;
};

module.exports = { initSocket };
